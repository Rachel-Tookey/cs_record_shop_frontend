@using System.Web
@using RSFrontEnd.Clients
@using RSFrontEnd.Models
@rendermode InteractiveAuto

<div class="topbar">

<div class="container">
    <div class="row">
        <div class="filter col-sm-12 col-md-6 col-lg-4 col-xl-4">
            <InputText class="songsearch border-4 rounded h-10 border-blue-300" @bind-Value="@SongName" placeholder="Filter by Song Name"/>
        </div>
        <div class="filter col-sm-12 col-md-6 col-lg-4 col-xl-4">
            <InputText class="songsearch border-4 rounded h-10 border-blue-300" @bind-Value="@ArtistName" placeholder="Filter by Artist Name"/>
        </div>
        <div class="filter col-sm-12 col-md-6 col-lg-2 col-xl-2">
            <InputSelect class="form-select form-select-lg mb-3 h-10" style="height:100px" @bind-Value="@SelectedGenres" multiple="">
                @if (genres.Count > 0)
                {
                    @foreach (var genre in genres)
                    {
                        <option value="@genre.Name">@genre.Name</option>
                    }
                }
            </InputSelect>
            <div style="height:20px"></div>
            </div>
        <div class="filter col-sm-12 col-md-6 col-lg-2 col-xl-2">
            <button class="btn btn-light" style="height:40px" @onclick="FilterSongs">Apply Filter</button>
            <div style="height:20px">
            </div>
            <button class="btn btn-light" style="height:40px" @onclick="ClearFilter">Clear Filter</button>
        </div>
        
    </div>
</div>

<div class="spacer" style="height:50px">
</div>

</div>

<div style="height:50px">
</div>

@if (songs == null) {
    <Loader></Loader>
} else if (songs.Count > 0) {
    <div class="container">
        <div class="row">
            
            <Virtualize Items="songs" Context="song">
                <div class="col-sm-12 col-md-6 col-lg-4 col-xl-4">
                    <SongSummary song="song" deleteFunction="DeleteSong"></SongSummary>
                </div>
            </Virtualize>

        </div>
    </div>
}else if (songs.Count == 0) {
    
    <p id="noresults">No results found!</p>
    
} 


@code {

    public string SongName { get; set; } = "";

    public string ArtistName { get; set; } = "";
    
    public List<Song> songs { get; set; } = new List<Song>(); 
    
    public List<Genre> genres { get; set; } = new List<Genre>();

    public string[] SelectedGenres { get; set; } = [];
        
    protected override async Task OnInitializedAsync()
    {
        var songWebClient = new HttpBackendClient<List<Song>>("api/song");
        songs = await songWebClient.GetRequest();
        var genreWebClient = new HttpBackendClient<List<Genre>>("api/artist/genre");
        genres = await genreWebClient.GetRequest();
    }
    
    public async Task DeleteSong(int id)
    {
        var client = new HttpBackendClient<Song>($"api/song/{id}"); 
        var response = await client.DeleteRequest();
        if (response == System.Net.HttpStatusCode.NoContent)
        {
            songs = songs.Where(s => s.Id != id).ToList();
            StateHasChanged();
        }
    }

    public async Task FilterSongs()
    {
        var query = HttpUtility.ParseQueryString(string.Empty);
        foreach (var g in SelectedGenres)
        {
            query.Add("genres", g);
        }
        var client = new HttpBackendClient<List<Song>>($"api/song?artistname={ArtistName}&songname={SongName}&{query.ToString()}"); 
        songs = await client.GetRequest();
        StateHasChanged();
    }

    public void ClearFilter()
    {
        ArtistName = "";
        SongName = "";
        SelectedGenres = [];
        FilterSongs();
    }
    
}
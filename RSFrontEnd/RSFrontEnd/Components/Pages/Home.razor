@page "/"
@rendermode InteractiveServer
@using RSFrontEnd.Models;
@using RSFrontEnd.Clients;
@using AuralizeBlazor; 
@using AuralizeBlazor.Features
@using AuralizeBlazor.Options
@using BlazorJS.Attributes
@using VisualizationMode = AuralizeBlazor.Options.VisualizationMode
@using FuzzySharp;

<PageTitle>Home</PageTitle>

<div class="text-center bg-blue-100">
    <input class="border-4 w-1/3 rounded m-6 p-6 h-8 border-blue-300" @bind="SearchText" @bind:event="oninput" placeholder="Search by Artist"/>
    @if (FilteredArtists.Any())
    {
        <div class="searchwrapper">
            <div class="mx-auto" style="width: 27%; position: absolute">
                <div class="list-group searchresults" > 
                    @foreach (var ar in FilteredArtists)
                    {
                        <a class="searchresults list-group-item list-group-item-action">@ar.Name</a>
                    }
                </div>
            </div>
        </div>
    }
</div>

<br/>

<div class="container">
    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-6 col-xl-4">
            <div class="homeartistdisplay">
                <p id="playing">Now Playing:</p>
                <p>Back to Black, Amy Winehouse</p>
            </div>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-6 col-xl-4">
            <div class="homeartistdisplay">
                <iframe id="spotify" src="https://open.spotify.com/embed/track/30FURVTCpbKyykjSEQzGkH" width="400" height="100" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe>
            </div>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-6 col-xl-4">
            <div class="homeartistdisplay">
                <p id="playing">Next song ⏭️</p>
                <p id="smalltext">Click for a new song or select from the search bar</p>
            </div>
        </div>
    </div>
</div>

<br/>


<MudIconButton Title="Picture in picture" OnClick="@(() => _vis.TogglePictureInPicture())" />
<Auralizer @ref=_vis
           ConnectMicrophone="true"
           InitialPreset="AuralizerPreset.NeonPulse"
           Features="_myFeatrues"
           Height="470px">
</Auralizer>



@code {
    
    private string searchText = "";
    
    private string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            DynamicSearch(); 
        }
    }
    

    public List<Artist> artists { get; set; } = new List<Artist>() { new Artist(){ Name = "Amy Winehouse"}, new Artist(){ Name = "Dolly Parton"}, new Artist(){ Name ="Amy McDonald"} } ;

    public List<Artist> FilteredArtists = new List<Artist>(); 

    // protected override async Task OnInitializedAsync()
    // {
    //     var webclient = new HttpBackendClient<List<Artist>>("api/artist");
    //     artists = await webclient.GetRequest();
    // }
    
    
    public void DynamicSearch()
    {
        Console.WriteLine("Search called");
        if (SearchText != "" && artists.Count > 0)
        {
            FilteredArtists = artists
                .Where(a => Fuzz.PartialRatio(a.Name, SearchText) > 60) 
                .ToList();
            Console.WriteLine("Artists filtered");
        } else 
        {
            Console.WriteLine("Artists removed");
            FilteredArtists = new List<Artist>(); 
        }
    }


    Auralizer _vis;

    private IVisualizerFeature[] _myFeatrues = new IVisualizerFeature[]
    {
        new ShowLogoFeature() {Label = "Back to Black"},
    };


}

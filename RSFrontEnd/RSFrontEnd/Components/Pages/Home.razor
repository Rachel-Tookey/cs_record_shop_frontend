@page "/"
@rendermode InteractiveServer
@using RSFrontEnd.Models;
@using RSFrontEnd.Clients;
@using AuralizeBlazor; 
@using AuralizeBlazor.Features
@using FuzzySharp;
@using Nextended.Core.Extensions


<PageTitle>Home</PageTitle>

<!--- pull out into component? will search render correctly? --> 
<div class="text-center bg-blue-100">
    <input class="border-4 rounded m-6 p-6 h-8 border-blue-300" style="width: 410px;"  @bind="SearchText" @bind:event="oninput" placeholder="Search by song or artist"/>
    @if (FilteredSongs.Any())
    {
        <div class="searchwrapper">
            <div class="mx-auto" style="width: 27%; position: absolute">
                <div class="list-group searchresults" > 
                    @foreach (var song in FilteredSongs)
                    {
                        <a class="searchresults list-group-item list-group-item-action" @onclick="() => UpdateChoice(song.Id)">@song.Name</a>
                    }
                </div>
            </div>
        </div>
    }
</div>

<br/>

@if (randomSong == null)
{
    <Loader></Loader>
}
else
{
    <HomeArtistDisplay DisplayedSong="@randomSong" NewRandomSong="@UpdateRandom" ></HomeArtistDisplay>
}


<br/>

<!--- this only works on windows browsers using microphone? --->
<MudIconButton Title="Picture in picture" OnClick="@(() => _vis.TogglePictureInPicture())" />
<Auralizer @ref=_vis
           ConnectMicrophone="true"
           InitialPreset="AuralizerPreset.NeonPulse"
           Features="_myFeatrues"
           Height="470px">
</Auralizer>



@code {
    
    private string searchText = "";
    
    private string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            DynamicSearchAsync(); 
        }
    }

    public Song randomSong { get; set; } 
    
    public List<Song> songs { get; set; } = new List<Song>() ;

    public List<Song> FilteredSongs { get; set; } = new List<Song>(); 

    protected override async Task OnInitializedAsync()
    {
        var webclient = new HttpBackendClient<Song>("api/song/random");
        randomSong = await webclient.GetRequest();
    }
    
    public async Task DynamicSearchAsync()
    {
        if (!string.IsNullOrEmpty(SearchText))
        {
            var webclient = new HttpBackendClient<List<Song>>($"api/song/homepage?search={SearchText}");
            FilteredSongs = await webclient.GetRequest();

        } else 
        {
            FilteredSongs = new (); 
        }
    }

    
    public async Task UpdateRandom()
    {
        var webclient = new HttpBackendClient<Song>("api/song/random");
        randomSong = await webclient.GetRequest();
    }

    public void UpdateChoice(int id)
    {
        randomSong = FilteredSongs.Where(s => s.Id == id).FirstOrDefault();
        if (randomSong != null)
        {
            SearchText = ""; 
        }
    }
    
    
    Auralizer _vis;

    private IVisualizerFeature[] _myFeatrues = new IVisualizerFeature[]
    {
        new ShowLogoFeature() {Label = "Click visualizer to start"},
    };


}
